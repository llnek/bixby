// This library is distributed in  the hope that it will be useful but without
// any  warranty; without  even  the  implied  warranty of  merchantability or
// fitness for a particular purpose.
// The use and distribution terms for this software are covered by the Eclipse
// Public License 1.0  (http://opensource.org/licenses/eclipse-1.0.php)  which
// can be found in the file epl-v10.html at the root of this distribution.
// By using this software in any  fashion, you are agreeing to be bound by the
// terms of this license. You  must not remove this notice, or any other, from
// this software.
// Copyright (c) 2013, Ken Leung. All rights reserved.


//////////////////////////////////////////////////////////////////////////////
// clean
target (cleanTardis: '') {
  ant.delete ( dir: "${buildDir}/czlab.tardis", quiet: true)
  //delete ( dir: "${qaDir}/czlab", quiet: true)
}

//////////////////////////////////////////////////////////////////////////////
// build
target (buildTardis: '') {
  depends (cleanTardis,  resolve, preBuild)
  println "##############################################################################"
  println "Building module ${gantProjectName}#clojure.tardis"
  println "##############################################################################"
  doCompileTardis()
}

target (cTardisJar: '') {
  ant.delete (file: "${distribDir}/exec/tardis-${buildVersion}.jar", quiet: true)
  doJarTardis()
}

target (cTardisCore: '') {
  ant.delete ( dir: "${buildDir}/czlab.tardis/core", quiet: true)
  clj_Core()
}
target (cTardisEtc: '') {
  ant.delete ( dir: "${buildDir}/czlab.tardis/etc", quiet: true)
  clj_Etc()
}
target (cTardisAuth: '') {
  ant.delete ( dir: "${buildDir}/czlab.tardis/auth", quiet: true)
  clj_Auth()
}
target (cTardisIO: '') {
  ant.delete ( dir: "${buildDir}/czlab.tardis/io", quiet: true)
  clj_IO()
}
target (cTardisMVC: '') {
  ant.delete ( dir: "${buildDir}/czlab.tardis/mvc", quiet: true)
  clj_MVC()
}
target (cTardisMain: '') {
  ant.delete ( dir: "${buildDir}/czlab.tardis/impl", quiet: true)
  clj_Main()
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileTardis() {

  clj_Core()
  clj_Etc()
  clj_Auth()
  clj_IO()
  clj_MVC()
  clj_Main()

  doJarTardis()
}

def doJarTardis() {

  ant.copy (todir: "${buildDir}/czlab.tardis") {
    fileset (dir: "${srcDir}/clojure/czlab.tardis") {
      exclude (name: '**/*.meta')
      exclude (name: '**/*.clj')
      exclude (name: '**/.svn')
    }
  }

  ant.jar (destfile: "${distribDir}/exec/tardis-${buildVersion}.jar") {
    fileset (dir: "${buildDir}") {
      include (name: 'czlab.tardis/**')
    }
  }

}

//////////////////////////////////////////////////////////////////////////////
//
def clj_Core() {
  //println "cljhhh_Core:"
  ant.java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'czlab.tardis.core.consts')
    arg (value: 'czlab.tardis.core.sys')
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def clj_Etc() {
  //println "cljhhh_Etc:"
  ant.java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'czlab.tardis.etc.cmd2')
    arg (value: 'czlab.tardis.etc.task')
    arg (value: 'czlab.tardis.etc.gant')
    arg (value: 'czlab.tardis.etc.cmd1')
    arg (value: 'czlab.tardis.etc.core')
    arg (value: 'czlab.tardis.etc.shell')
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def clj_Auth() {
  //println "cljhhh_Auth:"
  ant.java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'czlab.tardis.auth.model')
    arg (value: 'czlab.tardis.auth.realm')
    arg (value: 'czlab.tardis.auth.shiro')
    arg (value: 'czlab.tardis.auth.plugin')
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def clj_IO() {
  //println "cljhhh_IO:"
  ant.java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'czlab.tardis.io.core')
    arg (value: 'czlab.tardis.io.socket')
    arg (value: 'czlab.tardis.io.files')
    arg (value: 'czlab.tardis.io.http')
    arg (value: 'czlab.tardis.io.jms')
    arg (value: 'czlab.tardis.io.loops')
    arg (value: 'czlab.tardis.io.mails')
    arg (value: 'czlab.tardis.io.netty')
    arg (value: 'czlab.tardis.io.jetty')
    arg (value: 'czlab.tardis.io.triggers')
    arg (value: 'czlab.tardis.io.webss')
    arg (value: 'czlab.tardis.io.basicauth')
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def clj_MVC() {
  //println "cljhhh_MVC:"
  ant.java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'czlab.tardis.mvc.assets')
    arg (value: 'czlab.tardis.mvc.comms')
    arg (value: 'czlab.tardis.mvc.filters')
    arg (value: 'czlab.tardis.mvc.ftlshim')
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def clj_Main() {
  //println "cljhhh_Main:"
  ant.java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'czlab.tardis.impl.climain')
    arg (value: 'czlab.tardis.impl.dfts')
    arg (value: 'czlab.tardis.impl.ext')
    arg (value: 'czlab.tardis.impl.exec')
    arg (value: 'czlab.tardis.impl.misc')
  }
}

//////////////////////////////////////////////////////////////////////////////
//





