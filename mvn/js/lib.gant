// This library is distributed in  the hope that it will be useful but without
// any  warranty; without  even  the  implied  warranty of  merchantability or
// fitness for a particular purpose.
// The use and distribution terms for this software are covered by the Eclipse
// Public License 1.0  (http://opensource.org/licenses/eclipse-1.0.php)  which
// can be found in the file epl-v10.html at the root of this distribution.
// By using this software in any  fashion, you are agreeing to be bound by the
// terms of this license. You  must not remove this notice, or any other, from
// this software.
// Copyright (c) 2013-2015, Ken Leung. All rights reserved.

//////////////////////////////////////////////////////////////////////////////
// clean
target (cleanJSLib: '') {
  ant.delete ( dir: "${buildDir}/js", quiet: true)
  cleanLocalJs()
}

target (cleanJSLibTest: '') {
  ant.delete ( dir: "${buildTestDir}/js", quiet: true)
}

//////////////////////////////////////////////////////////////////////////////
// test
target (buildJSLibTest: '') {
  depends(cleanJSLibTest, preTest)
  doCompileJSLibTest()
}

target (runJSLibTest: '') {
  depends(buildJSLibTest)
  doRunJSLibTest()
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileJSLibTest() {
}

//////////////////////////////////////////////////////////////////////////////
//
def doRunJSLibTest() {
}

def cleanLocalJs() {
  ant.delete ( dir: "${srcDir}/js/${bldDir}", quiet: true)
}

//////////////////////////////////////////////////////////////////////////////
// build
target (buildJSLib: '') {
  depends (cleanJSLib,  resolve, preBuild)
  println "##############################################################################"
  println "Building module ${gantProjectName}#skaro+js"
  println "##############################################################################"
  root= new File("${srcDir}/js")
  jsWalkTree(new Stack(), root)
  cleanLocalJs()
}

//////////////////////////////////////////////////////////////////////////////
//
def jsWalkTree( stk,seed) {
  top=null;if (seed != null) { top=seed } else { top=stk.peek() }
  skip="${bldDir}";path=null;fid="";mid="";
  top.eachFile { f ->
    if (skip == f.getName()) {}
    else
    if (f.isDirectory()) {
      stk.push(f)
      jsWalkTree( stk,null)
    } else {
      if (stk.empty()) { path="" } else {
        path = stk.collect({ c -> c.getName() }).toArray(new ArrayList()).join('/')
      }
      mid= fid= f.getName()
      if (path.length() > 0) {
        mid=path + "/" + fid
      }
      babelFile(mid)
      //println "f = " + f.getName()
      //println "path = " + path + "/" + fid
    }
  }
  if (!stk.empty()) { stk.pop(); }
}
//////////////////////////////////////////////////////////////////////////////
//
def babelFile(mid) {
  out="${buildDir}/js"
  dir= "${srcDir}/js"
  if (mid.endsWith(".js")) {
    ant.exec (executable: 'babel', dir: "${dir}") {
      arg(value: "--modules")
      arg(value: "amd")
      arg(value: "--module-ids")
      arg(value: "${mid}")
      arg(value: '--out-dir')
      arg(value: "${bldDir}")
    }
    ant.replace(file: "${dir}/${bldDir}/${mid}",token:"/*@@",value:"")
    ant.replace(file: "${dir}/${bldDir}/${mid}",token:"@@*/",value:"")
  } else {
    des=new File(dir, "${bldDir}/${mid}").getParentFile()
    des2=des.toString()
    ant.copy(file:"${dir}/${mid}", todir: "${des2}")
  }
  des=new File(out,mid).getParentFile()
  des.mkdirs()
  des2=des.toString()
  ant.move(file: "${dir}/${bldDir}/${mid}",todir: "${des2}")
}

//////////////////////////////////////////////////////////////////////////////
//EOF




