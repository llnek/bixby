// This library is distributed in  the hope that it will be useful but without
// any  warranty; without  even  the  implied  warranty of  merchantability or
// fitness for a particular purpose.
// The use and distribution terms for this software are covered by the Eclipse
// Public License 1.0  (http://opensource.org/licenses/eclipse-1.0.php)  which
// can be found in the file epl-v10.html at the root of this distribution.
// By using this software in any  fashion, you are agreeing to be bound by the
// terms of this license. You  must not remove this notice, or any other, from
// this software.
// Copyright (c) 2013 Cherimoia, LLC. All rights reserved.

import java.util.UUID

//////////////////////////////////////////////////////////////////////////////
// external tools
//////////////////////////////////////////////////////////////////////////////

includeTool << gant.tools.Ivy

//////////////////////////////////////////////////////////////////////////////
// global properties
//////////////////////////////////////////////////////////////////////////////

property( name: 'gantProjectName' , value: 'skaro')
property( name: 'PID_DISTRO', value: "${gantProjectName}-distro")
property( name: "PID", value: "${gantProjectName}")
property ( file: "build.xs" )
property( name: 'ivySettingsDir', value: "${basedir}")

//////////////////////////////////////////////////////////////////////////////
// language compilers
//////////////////////////////////////////////////////////////////////////////

path (id : 'scalaPathId') {
  fileset ( dir: "${scalaLibDir}" )
}

path (id: 'clojurePathId') {
  fileset ( dir: "${clojureDir}")
}

path (id : 'tpclPathId') {
  fileset ( dir: "${tpclDir}" )
}

taskdef ( name: 'scalac',
          classname: 'scala.tools.ant.Scalac',
          classpathref: 'scalaPathId')

def generateUUID() { UUID.randomUUID() }

  /* =================================
        target: ivy stuff
       ================================= */

ivy.settings( file: "${ivySettingsDir}/ivy.config.xml" )

target (resolve: '') {
  // conf="*" will copie artifacts defined for each conf in a dir matching conf name
  ivy.retrieve( pattern: "${ivyLibDir}/[conf]/[artifact]-[revision].[ext]" )
}

  /* =================================
        target: build
       ================================= */

target (buildr : '') {
  depends (clean,checkTpcl,resolve,preBuild)
  println "#############################################"
  println "#                                           #"
  println "Building project ${gantProjectName}..."
  println "#                                           #"
  println "#############################################"
  compileAndJar()
}

  /* =================================
        target: test-build
       ================================= */

target ( testBuild : '') {
  depends(compileTestCode, runTestCode)
  println "Test called - OK."
}

target (fullTestBuild : '') {
  depends (buildr, testBuild)
}

  /* =================================
      target: publish
     ================================= */

target (pubDistro : '') {
  depends (justJar, distroPackage, clean4Distro)
  ivy.publish (resolver: 'local-repo',
               overwrite: true,
               status: 'release',
               pubrevision: "${buildVersion}") {
    artifacts ( pattern: "${distribDir}/[artifact]-${buildVersion}.[ext]")
  }
  println "Project ${PID} released with version ${buildVersion} - OK."
}

target (pubJar: '') {
  depends (testBuild)
}

target (justJar: '') {
  depends(buildr)
}

  /* =================================
      target: clean
     ================================= */

target (cleanPackDir: '') {
  mkdir (dir: "${packDir}")
  delete ( includeEmptyDirs: true) {
    fileset (followsymlinks: false, dir: "${packDir}", includes: '**/*')
  }
}
target (clean: '') {
  depends (cleanPackDir)
  delete ( dir: "${buildDir}")
  delete ( dir: "${qaDir}")
  delete ( dir: "${distribDir}" )
  delete ( dir: "${libDir}" )
  mkdir (dir: "${gantBuildDir}")
}

  /* =================================
        target: clean-cache
       ================================= */

target (cleanCache : '') {
  ivy.cleancache()
}

  /* =================================
      target: clean-local
     ================================= */

target (cleanLocal: '') {
  println "${ivyLRepoDir}"
}

  /* =================================
        target: report
       ================================= */

target (report: '') {
  depends (resolve)
  ivy.report (todir: "${buildDir}")
}

  /* =================================
      target: distro-package
     ================================= */

target (distroPackage: '') {
  depends (distroInit, packAndDistro)
}

target (distroInit: '') {
  depends (cleanPackDir)
  mkdir (dir: "${packDir}")
  mkdir (dir: "${packDir}/conf")
  //mkdir (dir: "${packDir}/boot")
  mkdir (dir: "${packDir}/dist/boot")
  mkdir (dir: "${packDir}/dist/exec")
  mkdir (dir: "${packDir}/bin")
  mkdir (dir: "${packDir}/etc/blocks")
  //mkdir (dir: "${packDir}/etc")
  //mkdir (dir: "${packDir}/patch")
  mkdir (dir: "${packDir}/lib")
  mkdir (dir: "${packDir}/logs")
  mkdir (dir: "${packDir}/docs/samples")
  mkdir (dir: "${packDir}/docs/src")
  //mkdir (dir: "${packDir}/lics")
  mkdir (dir: "${packDir}/tmp")
  mkdir (dir: "${packDir}/apps")
  //mkdir (dir: "${packDir}/pods")
  mkdir (dir: "${packDir}/.ivyroot")
  touch (file: "${packDir}/VERSION")
  echo (message: "${buildVersion}" , file: "${packDir}/VERSION")
  copy (todir: "${packDir}/etc") {
    fileset (dir: "${basedir}/etc")
  }
  copy (todir: "${packDir}/conf") {
    fileset (dir: "${basedir}/etc/conf")
  }
}

target (packAndDistro : '') {
  depends (packRes,
           //packDocs,
           packSrc,
           packLics,
           packBin,
           packDist,
           packLibs,
           packSamples,
           packAll)
}

  /* =================================
        target: pack-resource
       ================================= */

target (packRes: '') {
  copy (todir: "${packDir}/etc/blocks", flatten: true) {
    fileset (dir: "${srcDir}/clojure") {
      include (name: '**/*.meta')
    }
  }
  copy (todir: "${packDir}/etc") {
    fileset (dir: "${basedir}/etc")
  }
}

  /* =================================
        target: pack-docs
       ================================= */

target (packDocs: '') {
  mkdir (dir: "${packDir}/docs/api")
  copy (todir: "${packDir}/docs") {
    fileset (dir: "${basedir}/docs", erroronmissingdir: false) {
      exclude (name: 'dummy.txt')
      exclude (name: '.svn')
    }
  }
  java (classname: 'autodoc.autodoc',
    fork: true,
    failonerror: true) {
    classpath (refid: 'compilePathId')
    arg (value: '--name=Skaro')
    arg (value: "--root=${basedir}")
    arg (value: '--source-path=src/main/clojure')
    arg (value: "--output-path=${packDir}/docs/api")
  }
}

  /* =================================
        target: pack-src
       ================================= */

target (packSrc: '') {
  copy (todir: "${packDir}/docs/src/main/clojure") {
    fileset (dir: "${srcDir}/clojure")
  }
  copy (todir: "${packDir}/docs/src/main/java") {
    fileset (dir: "${srcDir}/java")
  }
}

  /* =================================
        target: pack-lics
       ================================= */

target (packLics: '') {
  copy (todir: "${packDir}/lics") {
    fileset (dir: "${basedir}/lics", erroronmissingdir: false)
  }
  copy (todir: "${packDir}", flatten: true) {
    fileset (dir: "${basedir}") {
      include (name: '*.html')
      include (name: '*.txt')
      include (name: '*.md')
    }
  }

}

  /* =================================
        target: pack-dist
       ================================= */

target (packDist: '') {
  copy (todir: "${packDir}/dist/exec") {
    fileset (dir: "${distribDir}/exec") {
      include (name: '*.jar')
    }
  }
  copy (todir: "${packDir}/dist/boot") {
    fileset (dir: "${distribDir}/boot") {
      include (name: '*.jar')
    }
  }
}

  /* =================================
        target: pack-libs
       =================================  */

target (packLibs: '') {
  copy (todir: "${packDir}/lib") {
    fileset (dir: "${libDir}/libjar")
  }
}

  /* =================================
        target: pack-bin
       ================================= */

target (packBin: '') {
  copy (todir: "${packDir}/bin") {
    fileset (dir: "${basedir}/bin", erroronmissingdir: false) {
      exclude (name: '.svn')
    }
  }
  chmod (dir: "${packDir}/bin", perm: '755', includes: '*')
}

  /* =================================
        target: pack-samples
       ================================= */

target (packSamples: '') {
  new File( "${srcDir}/java/demo").eachDir { dir ->
    createOneDemoApp(dir)
  }
}

  /* =================================
        target: pack-all
       ================================= */

target (packAll: '') {
  delete (dir: "${packDir}/tmp")
  mkdir (dir: "${packDir}/tmp")
  tar (destfile: "${distribDir}/${PID_DISTRO}-${buildVersion}.tar.gz", compression: 'gzip') {
    tarfileset (dir: "${packDir}") {
      exclude (name: 'apps/**')
      exclude (name: 'bin/**')
    }
    tarfileset (dir: "${packDir}", filemode: '755') {
      include (name: 'bin/**')
    }
  }
  /*
  gzip (destfile: "${distribDir}/${PID_DISTRO}-${buildVersion}.tar.gz", src: "${distribDir}/${PID_DISTRO}.tar")
  zip (destfile: "${distribDir}/${PID_DISTRO}.zip") {
    fileset (dir: "${packDir}")
  }
  */
}

target (checkTpcl: '') {
}

target (preBuild: '') {
  mkdir (dir: "${distribDir}/boot")
  mkdir (dir: "${distribDir}/exec")
  mkdir (dir: "${libDir}")
  mkdir (dir: "${libDir}/libjar")
  mkdir (dir: "${qaDir}")
  mkdir (dir: "${buildDir}")
  // get rid of debug logging during build!
  copy (todir: "${buildDir}", file: "${basedir}/log4j.properties")
  copy (todir: "${buildDir}", file: "${basedir}/logback.xml")
}

  /*
       paths used for compilation and run
       */

path (id: 'compilePathId') {
  fileset (dir: "${libDir}/libjar")
  fileset (dir: "${scalaLibDir}")
  fileset (dir: "${clojureDir}")
  path (location: "${buildDir}")
  path (location: "${srcDir}/clojure")
  fileset (dir: "${distribDir}") {
    include (name: 'boot/*.jar')
    include (name: 'exec/*.jar')
  }
}

path (id: 'testPathId') {
  fileset (dir: "${libDir}/test") {
    include (name: '*.jar')
  }
  fileset (dir: "${scalaLibDir}") {
    include (name: '*.jar')
  }
  fileset (dir: "${clojureDir}") {
    include (name: '*.jar')
  }
  fileset (dir: "${distribDir}") {
    include (name: 'boot/*.jar')
    include (name: 'exec/*.jar')
  }
  path (location: "${buildDir}")
  path (location: "${buildTestDir}")
  path (location: "${testDir}/clojure")
}


  /*
       clojure console
       */

target (repl: '') { clj_console() }

  /*
       compile source code
       */

target (cljhhhMain: '') { cljhhh_Main() }

target (cljhhhCore: '') { cljhhh_Core() }

target (cljhhhEtc: '') { cljhhh_Etc() }

target (cljhhhIO: '') { cljhhh_IO() }

target (cljhhhAuth: '') { cljhhh_Auth() }

target (cljhhhMVC: '') { cljhhh_MVC() }

target (cljDBIO: '') { clj_DBIO() }

target (cljNet:'') { clj_Net() }

target (cljJMX: '') { clj_JMX() }

target (cljCrypto: '') { clj_Crypto() }

target (cljUtil: '') { clj_Util() }

target (jarit: '') { jarAll() }

target (compileJavaCode: '') { compileJava() }
target (compileClj: '') { compile_clj() }

  /*
       compile test code
       */

target (compileTestCode: '') {
  mkdir (dir: "${reportTestDir}")
  mkdir (dir: "${buildTestDir}")
  compileTests_Java()
  compileTests_Scala()
  compileTests_Clj()
}

  /*
       run test code
       */

target (runtestsJava: '') { runtests_Java() }

target (runtestsScala: '') { runtests_Scala() }

target (runtestsClj: '') { runtests_Clj() }

target (runTestCode: '') {
  //depends (compileTestCode)
  depends(runtestsJava,runtestsClj)
  //println 'No test to run.'
}

  /*
       pack common web assets (css + js)
       */
target (packWebAssets: '') {
}


  /*
       pack license files
       */

target (packAllLics: '') {
  copy (todir: "${packDir}/lics") {
    fileset (dir: "${basedir}/lics", erroronmissingdir: false) {
      exclude (name: '.svn')
    }
  }
}

  /*
       pack samples and/or demos
       */

def createOneDemoApp(dir) {
  final demoDir="${packDir}/docs/samples"
  final demoSrc="${srcDir}/java"
  final appkey= generateUUID()
  final appid= dir.getName()
  final res= "${demoDir}/${appid}/src/main/resources/"
  final pfx= "${demoDir}/${appid}/public/"
  if ("jetty" == "${appid}" || "mvc" == "${appid}") {
    ["pages", "images","scripts","styles"].each { s ->
      new File(pfx + s).mkdirs()
    }
    ant.copy (todir: pfx + "images", file: "${basedir}/etc/web/favicon.ico")
    ant.copy (todir: pfx + "scripts", file: "${demoSrc}/demo/test.js")
    ant.copy (todir: pfx + "styles", file: "${demoSrc}/demo/main.css")
    //ant.mkdir (dir: res + "coffee")
    ant.mkdir (dir: res + "less")
    ant.mkdir (dir: res + "js")
  }
  ant.copy (todir: "${demoDir}/${appid}", file: "${basedir}/etc/app/build.xml")
  if ("jetty" == "${appid}") {
    ant.mkdir (dir: "${demoDir}/${appid}/WEB-INF/classes")
    ant.mkdir (dir: "${demoDir}/${appid}/WEB-INF/lib")
    ant.copy (todir: "${demoDir}/${appid}/WEB-INF", file: "${basedir}/etc/jetty/web.xml")
  }
  ["classes", "patch", "lib" ].each { s ->
    new File("${demoDir}/${appid}/POD-INF/" + s).mkdirs()
  }
  //copy (todir: "${demoDir}/${appid}/POD-INF/lib", file: "${distribDir}/demo.jar")
  ant.mkdir (dir: "${demoDir}/${appid}/META-INF")
  ant.echo (message: '', file: "${demoDir}/${appid}/META-INF/RELEASE-NOTES.txt")
  ant.echo (message: '', file: "${demoDir}/${appid}/META-INF/NOTES.txt")
  ant.echo (message: '', file: "${demoDir}/${appid}/META-INF/LICENSE.txt")
  ant.echo (message: '', file: "${demoDir}/${appid}/META-INF/README.md")
  ant.copy (todir: "${demoDir}/${appid}/META-INF", file: "${basedir}/etc/app/MANIFEST.MF")
  ant.replace (file: "${demoDir}/${appid}/META-INF/MANIFEST.MF", token: "@@APPKEY@@", value: "${appkey}")
  ant.replace (file: "${demoDir}/${appid}/META-INF/MANIFEST.MF", token: "@@APPMAINCLASS@@", value: "demo.${appid}.DemoMain")
  ant.copy (todir: "${demoDir}/${appid}/conf") {
    fileset (dir: "${demoSrc}/demo/${appid}") {
      include (name: '*.conf')
    }
  }
  copy (todir: "${demoDir}/${appid}/conf", file: "${basedir}/etc/app/app.conf")
  replace (file: "${demoDir}/${appid}/conf/app.conf", token: "@@USER@@", value: 'test')
  ant.copy (todir: "${demoDir}/${appid}/src/main/java/demo/${appid}") {
    fileset (dir: "${demoSrc}/demo/${appid}") {
      exclude (name: '**/env.conf')
    }
  }
  ant.mkdir(dir: "${demoDir}/${appid}/src/main/clojure")
  ant.mkdir(dir: "${demoDir}/${appid}/src/main/java")
  ant.mkdir(dir: "${demoDir}/${appid}/docs")
  ant.copy (todir: "${demoDir}/${appid}", file: "${basedir}/etc/app/build.xs")
  ant.replace (file: "${demoDir}/${appid}/build.xs", token: "@@SKAROHOME@@", value: "${basedir}/../..")
  ant.replace (file: "${demoDir}/${appid}/build.xml", token: "@@APPID@@", value: "${appid}")
  ant.replace (file: "${demoDir}/${appid}/build.xml", token: "@@APPCLJFILES@@", value: '')
  ant.copy (todir: "${demoDir}/${appid}", file: "${basedir}/etc/app/ivy.config.xml")
  ant.copy (todir: "${demoDir}/${appid}", file: "${basedir}/etc/app/ivy.xml")
  ant.replace (file: "${demoDir}/${appid}/ivy.xml", token: "@@APPDOMAIN@@", value: 'demoware')
  ant.replace (file: "${demoDir}/${appid}/ivy.xml", token: "@@APPID@@", value: "${appid}")
  ant.copy (todir: "${demoDir}/${appid}", file: "${basedir}/etc/app/pom.xml")
  ant.replace (file: "${demoDir}/${appid}/pom.xml", token: "@@APPDOMAIN@@", value: 'demoware')
  ant.replace (file: "${demoDir}/${appid}/pom.xml", token: "@@APPID@@", value: "${appid}")
  ant.zip (destfile: "${demoDir}/${appid}.pod") {
    fileset (dir: "${demoDir}/${appid}")
  }
  delete (dir: "${demoDir}/${appid}")
}

target (createDemoApp: '') {
}



  /*
       public TARGETS
       */

target (release: '') {
  depends (pubDistro)
}

target (jar: '') {
  depends (pubJar)
}

target (gentest: '') {
  depends (fullTestBuild)
}

target (test: '') {
  depends (testBuild)
}

target (jslint: '') {
  new File("${basedir}/src/web/scripts").eachFileRecurse(groovy.io.FileType.FILES, { f ->
    jslintScripts(f.getCanonicalPath())
  });
}

  /*
       housekeeping stuff
       */

target (clean4Distro: '') {
  delete (dir: "${ivyLCacheDir}/com.zotohlab/${gantProjectName}", quiet: true)
  delete (dir: "${ivyLRepoDir}/com.zotohlab/${gantProjectName}", quiet: true)
}


setDefaultTarget (release)


//////////////////////
//

def jslintScripts(filename) {
  java (classname: 'org.mozilla.javascript.tools.shell.Main',
        maxmemory: '2048m',
        fork: true,
        classpathref: 'compilePathId') {
    arg (value: '-version')
    arg (value: '170')
    arg (value: '-encoding')
    arg (value: 'utf-8')
    arg (value: '-strict')
    arg (value: filename)
  }
}

def compile_clj() {

  clj_Util()
  clj_Crypto()
  clj_Net()
  clj_JMX()
  clj_DBIO()
  cljhhh_Core()
  cljhhh_IO()
  cljhhh_Etc()
  cljhhh_Auth()
  cljhhh_MVC()
  cljhhh_Main()

  copy (todir: "${buildDir}") {
    fileset (dir: "${srcDir}/clojure") {
      exclude (name: '**/*.meta')
      exclude (name: '**/*.clj')
      exclude (name: '**/.svn')
    }
  }
}

def compileBootJava() {
  javac (sourcepath: '',
         srcdir: "${srcDir}/java",
         destdir: "${buildDir}",
         includeantruntime: false,
         excludes: '',
         debug: "${buildDebug}",
         debuglevel: 'lines,vars,source',
         classpathref: 'compilePathId') {
    compilerarg (line: '-Xlint:deprecation -Xlint:unchecked')
    include (name: 'com/zotohlab/gallifrey/loaders/**/*.java')
  }
}

def compileJava() {
  javac (sourcepath: '',
         srcdir: "${srcDir}/java",
         destdir: "${buildDir}",
         includeantruntime: false,
         excludes: '',
         debug: "${buildDebug}",
         debuglevel: 'lines,vars,source',
         classpathref: 'compilePathId') {
    compilerarg (line: '-Xlint:deprecation -Xlint:unchecked')
    exclude (name: '**/loaders/*.java')
    include (name: '**/*.java')
  }
}

def compileAndJar() {

  /* build the classloaders */
  compileBootJava()

  jar (destfile: "${distribDir}/boot/${PID}-spec-${buildVersion}.jar") {
    fileset (dir: "${buildDir}") {
      exclude (name: '**/log4j.properties')
      exclude (name: '**/logback.xml')
    }
  }

  delete (dir: "${buildDir}")
  mkdir (dir: "${buildDir}")

  // get rid of debug logging during build!
  copy (todir: "${buildDir}", file: "${basedir}/log4j.properties")
  copy (todir: "${buildDir}", file: "${basedir}/logback.xml")

  /* build other java stuff */

  compileJava()

  /* copy over other resources */
  copy (todir: "${buildDir}") {
    fileset (dir: "${srcDir}/java") {
      exclude (name: '**/*.java')
      exclude (name: '**/.svn')
    }
  }

  compile_clj()
  jarit()

}

def jarAll() {
  jar (destfile: "${distribDir}/exec/${PID}-${buildVersion}.jar") {
    fileset (dir: "${buildDir}") {
      exclude (name: '**/log4j.properties')
      exclude (name: '**/logback.xml')
      exclude (name: 'demo/**')
    }
  }
}

def clj_console() {
  java (classname: 'jline.ConsoleRunner',
        maxmemory: '2048m',
        fork: true,
        classpathref: 'compilePathId') {
    arg (value: 'clojure.main')
  }
}

def clj_Util() {
  println "clj_Util:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.nucleus.util.core')
    arg (value: 'cmzlabsclj.nucleus.util.bytes')
    arg (value: 'cmzlabsclj.nucleus.util.cmdline')
    arg (value: 'cmzlabsclj.nucleus.util.constants')
    arg (value: 'cmzlabsclj.nucleus.util.countrycode')
    arg (value: 'cmzlabsclj.nucleus.util.dates')
    arg (value: 'cmzlabsclj.nucleus.util.files')
    arg (value: 'cmzlabsclj.nucleus.util.guids')
    arg (value: 'cmzlabsclj.nucleus.util.io')
    arg (value: 'cmzlabsclj.nucleus.util.meta')
    arg (value: 'cmzlabsclj.nucleus.util.mime')
    arg (value: 'cmzlabsclj.nucleus.util.process')
    arg (value: 'cmzlabsclj.nucleus.util.seqnum')
    arg (value: 'cmzlabsclj.nucleus.util.str')
    arg (value: 'cmzlabsclj.nucleus.util.usastate')
    arg (value: 'cmzlabsclj.nucleus.util.ini')
    arg (value: 'cmzlabsclj.nucleus.util.scheduler')
    arg (value: 'cmzlabsclj.nucleus.i18n.resources')
  }
}

def clj_Crypto() {
  println "clj_Crypto:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.nucleus.crypto.codec')
    arg (value: 'cmzlabsclj.nucleus.crypto.core')
    arg (value: 'cmzlabsclj.nucleus.crypto.stores')
    arg (value: 'cmzlabsclj.nucleus.crypto.ssl')
  }
}


def clj_JMX() {
  println "clj_JMX:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.nucleus.jmx.names')
    arg (value: 'cmzlabsclj.nucleus.jmx.bean')
    arg (value: 'cmzlabsclj.nucleus.jmx.core')
  }
}

def clj_Net() {
  println "clj_Net:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.nucleus.net.comms')
    arg (value: 'cmzlabsclj.nucleus.net.routes')
    arg (value: 'cmzlabsclj.nucleus.netty.filesvr')
    arg (value: 'cmzlabsclj.nucleus.netty.discarder')
    arg (value: 'cmzlabsclj.nucleus.netty.snooper')
  }
}

def clj_DBIO() {
  println "clj_DBIO:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.nucleus.dbio.core')
    arg (value: 'cmzlabsclj.nucleus.dbio.sql')
    arg (value: 'cmzlabsclj.nucleus.dbio.simple')
    arg (value: 'cmzlabsclj.nucleus.dbio.composite')
    arg (value: 'cmzlabsclj.nucleus.dbio.connect')
    arg (value: 'cmzlabsclj.nucleus.dbio.drivers')
    arg (value: 'cmzlabsclj.nucleus.dbio.sqlserver')
    arg (value: 'cmzlabsclj.nucleus.dbio.h2')
    arg (value: 'cmzlabsclj.nucleus.dbio.oracle')
    arg (value: 'cmzlabsclj.nucleus.dbio.mysql')
    arg (value: 'cmzlabsclj.nucleus.dbio.postgresql')
  }
}

def cljhhh_MVC() {
  println "cljhhh_MVC:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.tardis.mvc.templates')
    arg (value: 'cmzlabsclj.tardis.mvc.comms')
    arg (value: 'cmzlabsclj.tardis.mvc.statics')
    arg (value: 'cmzlabsclj.tardis.mvc.handler')
  }
}


def cljhhh_Auth() {
  println "cljhhh_Auth:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.tardis.auth.model')
    arg (value: 'cmzlabsclj.tardis.auth.realm')
    arg (value: 'cmzlabsclj.tardis.auth.shiro')
    arg (value: 'cmzlabsclj.tardis.auth.plugin')
  }
}

def cljhhh_IO() {
  println "cljhhh_IO:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.tardis.io.core')
    arg (value: 'cmzlabsclj.tardis.io.socket')
    arg (value: 'cmzlabsclj.tardis.io.files')
    arg (value: 'cmzlabsclj.tardis.io.http')
    arg (value: 'cmzlabsclj.tardis.io.jms')
    arg (value: 'cmzlabsclj.tardis.io.loops')
    arg (value: 'cmzlabsclj.tardis.io.mails')
    arg (value: 'cmzlabsclj.tardis.io.netty')
    arg (value: 'cmzlabsclj.tardis.io.jetty')
    arg (value: 'cmzlabsclj.tardis.io.triggers')
    arg (value: 'cmzlabsclj.tardis.io.webss')
    arg (value: 'cmzlabsclj.tardis.io.basicauth')
  }
}

def cljhhh_Core() {
  println "cljhhh_Core:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.tardis.core.constants')
    arg (value: 'cmzlabsclj.tardis.core.sys')
    arg (value: 'cmzlabsclj.tardis.core.wfs')
  }
}

def cljhhh_Etc() {
  println "cljhhh_Etc:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.tardis.etc.climain')
    arg (value: 'cmzlabsclj.tardis.etc.cmdline')
    arg (value: 'cmzlabsclj.tardis.etc.task')
    arg (value: 'cmzlabsclj.tardis.etc.cli')
    arg (value: 'cmzlabsclj.tardis.etc.core')
    arg (value: 'cmzlabsclj.tardis.etc.misc')
    arg (value: 'cmzlabsclj.tardis.impl.defaults')
  }
}

def cljhhh_Main() {
  println "cljhhh_Main:"
  java (classname: 'clojure.lang.Compile',
        fork: true,
        failonerror: true,
        maxmemory: '2048m',
        classpathref: 'compilePathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabsclj.tardis.impl.ext')
    arg (value: 'cmzlabsclj.tardis.impl.sys')
    arg (value: 'cmzlabsclj.tardis.impl.exec')
  }
}

def compileTests_Java() {
  javac (sourcepath: '',
    srcdir: "${testDir}/java",
    destdir: "${buildTestDir}",
    includeantruntime: false,
    excludes: '',
    debug: "${buildDebug}",
    debuglevel: 'lines,vars,source',
    classpathref: 'testPathId') {
    compilerarg (line: '-Xlint:deprecation -Xlint:unchecked')
    include (name: '**/*.java')
  }
  copy (todir: "${buildTestDir}") {
    fileset (dir: "${testDir}/java") {
      exclude (name: '**/*.java')
      exclude (name: '**/.svn')
    }
  }
}

def compileTests_Scala() {
}

def compileTests_Clj() {
  java (classname: 'clojure.lang.Compile',
    fork: true,
    failonerror: true,
    maxmemory: '2048m',
    classpathref: 'testPathId') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: true)
    sysproperty (key: 'clojure.compile.path', value: "${buildTestDir}")
    arg (value: 'testcljc.util.byteutils')
    arg (value: 'testcljc.util.codes')
    arg (value: 'testcljc.util.coreutils')
    arg (value: 'testcljc.util.dateutils')
    arg (value: 'testcljc.util.fileutils')
    arg (value: 'testcljc.util.guids')
    arg (value: 'testcljc.util.ioutils')
    arg (value: 'testcljc.util.metautils')
    arg (value: 'testcljc.util.mimeutils')
    arg (value: 'testcljc.util.procutils')
    arg (value: 'testcljc.util.seqnumgen')
    arg (value: 'testcljc.util.strutils')
    arg (value: 'testcljc.util.win32ini')
    arg (value: 'testcljc.net.netstuff')
    arg (value: 'testcljc.i18n.i18nstuff')
    arg (value: 'testcljc.crypto.cryptostuff')
    arg (value: 'testcljc.crypto.mimestuff')
    arg (value: 'testcljc.dbio.dbstuff')
    arg (value: 'testcljc.tardis.auth')
  }
  copy (todir: "${buildTestDir}") {
    fileset (dir: "${testDir}/clojure") {
      exclude (name: '**/*.clj')
      exclude (name: '**/.svn')
    }
  }
}


def runtests_Java() {
  ant.junit (logfailedtests: true,
    showoutput: false,
    printsummary: true,
    fork: true,
    haltonfailure: true) {
    classpath (refid: 'testPathId')
    formatter (type: 'plain', usefile: false)
    batchtest (todir: "${reportTestDir}") {
      fileset (dir: "${buildTestDir}") {
        include (name: '**/JUTest.*')
      }
      formatter (type: 'xml')
    }
  }
}

def runtests_Scala() {
}

def runtests_Clj() {
  ant.junit (logfailedtests: true,
    showoutput: false,
    printsummary: true,
    fork: true,
    haltonfailure: true) {
    classpath (refid: 'testPathId')
    formatter (type: 'plain', usefile: false)
    test (name: 'testzotohlab.java.frwk.util.ClojureJUnit',
    todir: "${reportTestDir}") {
      formatter (type: 'xml')
    }
  }
}







