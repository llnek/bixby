// This library is distributed in  the hope that it will be useful but without
// any  warranty; without  even  the  implied  warranty of  merchantability or
// fitness for a particular purpose.
// The use and distribution terms for this software are covered by the Eclipse
// Public License 1.0  (http://opensource.org/licenses/eclipse-1.0.php)  which
// can be found in the file epl-v10.html at the root of this distribution.
// By using this software in any  fashion, you are agreeing to be bound by the
// terms of this license. You  must not remove this notice, or any other, from
// this software.
// Copyright (c) 2013, Ken Leung. All rights reserved.

import java.util.UUID

//////////////////////////////////////////////////////////////////////////////
// external tools
includeTool << gant.tools.Ivy


//////////////////////////////////////////////////////////////////////////////
// global properties
property( name: 'ivySettingsDir', value: "${basedir}")
property( name: 'gantProjectName' , value: 'skaro')
property( name: "PID", value: "${gantProjectName}")
property ( file: "build.xs" )

def generateUUID() { UUID.randomUUID() }

//////////////////////////////////////////////////////////////////////////////
// language compilers

path (id: 'compilePathId') {
  path (location: "${srcDir}/clojure")
  path (location: "${buildDir}")
  fileset (dir: "${libDir}/libjar") {
    include (name: '*.jar')
  }
}

path (id: 'testPathId') {
  path (location: "${testDir}/clojure")
  path (location: "${buildTestDir}")
  path (location: "${buildDir}")
  fileset (dir: "${libDir}/test") {
    include (name: '*.jar')
  }
}

//////////////////////////////////////////////////////////////////////////////
// sub modules

includeTargets << new File ('mvn/java/skaro.gant')
includeTargets << new File ('mvn/java/wflow.gant')
includeTargets << new File ('mvn/java/frwk.gant')
includeTargets << new File ('mvn/java/java-demo.gant')

includeTargets << new File ('mvn/clj/tardis.gant')
includeTargets << new File ('mvn/clj/xlib.gant')
includeTargets << new File ('mvn/clj/clj-demo.gant')

includeTargets << new File ('mvn/package.gant')

//////////////////////////////////////////////////////////////////////////////
// ivy stuff
ivy.settings( file: "${ivySettingsDir}/ivy.config.xml" )

target (resolve: '') {
  // conf="*" will copie artifacts defined for each conf in a dir matching conf name
  ivy.retrieve( pattern: "${ivyLibDir}/[conf]/[artifact]-[revision].[ext]" )
}

//////////////////////////////////////////////////////////////////////////////
// clean-cache
target (cleanCache : '') {
  ivy.cleancache()
}

//////////////////////////////////////////////////////////////////////////////
// clean-local
target (cleanLocal: '') {
  println "${ivyLRepoDir}"
}

//////////////////////////////////////////////////////////////////////////////
// report
target (report: '') {
  depends (resolve)
  ivy.report (todir: "${buildDir}")
}

//////////////////////////////////////////////////////////////////////////////
// build

target (clean4Build: '') {
  depends(cleanJavaFrwk, cleanWFlow, cleanGally,
  cleanXLib, cleanTardis,
  cleanJavaDemo,cleanCljDemo)
}

target (buildr : '') {
  depends (clean4Build, checkTpcl, resolve, preBuild)
  println "##############################################################################"
  println "#"
  println "Building project ${gantProjectName}"
  println "#"
  println "##############################################################################"
  compileAndJar()
}

//////////////////////////////////////////////////////////////////////////////
//
def compileAndJar() {
  depends(buildJavaFrwk, buildWFlow, buildGally,
  buildXLib, buildTardis,
  buildJavaDemo, buildCljDemo)
}

//////////////////////////////////////////////////////////////////////////////
// test-build
target (compileTestCode: '') {
  depends(buildJavaFrwkTest, buildXLibTest)
}

target (testBuild : '') {
  depends(compileTestCode, runJavaFrwkTest, runXLibTest)
  println "Test called - OK."
}

target (fullTestBuild : '') {
  depends (buildr, testBuild)
}

target (cleanAll: '') {
  depends (cleanPackDir)
  ant.delete ( dir: "${buildDir}", quiet: true)
  ant.delete ( dir: "${qaDir}", quiet: true)
  ant.delete ( dir: "${distribDir}" , quiet: true)
  ant.delete ( dir: "${libDir}" , quiet: true)
  ant.mkdir (dir: "${gantBuildDir}")
}

target (checkTpcl: '') {
}

target (preTest: '') {
  mkdir (dir: "${reportTestDir}")
  mkdir (dir: "${buildTestDir}")
}

target (preBuild: '') {
  mkdir (dir: "${distribDir}/boot")
  mkdir (dir: "${distribDir}/exec")
  mkdir (dir: "${libDir}/libjar")
  mkdir (dir: "${qaDir}")
  mkdir (dir: "${buildDir}")
  // get rid of debug logging during build!
  copy (todir: "${buildDir}", file: "${basedir}/log4j.properties")
  copy (todir: "${buildDir}", file: "${basedir}/logback.xml")
}

//////////////////////////////////////////////////////////////////////////////
//
def jslintScripts(filename) {
  java (classname: 'org.mozilla.javascript.tools.shell.Main',
        maxmemory: '2048m',
        fork: true,
        classpathref: 'compilePathId') {
    arg (value: '-version')
    arg (value: '170')
    arg (value: '-encoding')
    arg (value: 'utf-8')
    arg (value: '-strict')
    arg (value: filename)
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def clj_console() {
  java (classname: 'jline.ConsoleRunner',
        maxmemory: '2048m',
        fork: true,
        classpathref: 'compilePathId') {
    arg (value: 'clojure.main')
  }
}

//////////////////////////////////////////////////////////////////////////////
// public TARGETS

target (repl: '') { clj_console() }

target (release: '') {
  depends (cleanAll, pubDistro)
}

target (gentest: '') {
  depends (fullTestBuild)
}

target (test: '') {
  depends (testBuild)
}

target (jslint: '') {
  new File("${basedir}/src/web/scripts").eachFileRecurse(groovy.io.FileType.FILES, { f ->
    jslintScripts(f.getCanonicalPath())
  });
}

setDefaultTarget (release)


//////////////////////////////////////////////////////////////////////////////
//EOF






